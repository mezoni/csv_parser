import 'package:parser_builder/branch.dart';
import 'package:parser_builder/bytes.dart';
import 'package:parser_builder/character.dart';
import 'package:parser_builder/combinator.dart';
import 'package:parser_builder/fast_build.dart';
import 'package:parser_builder/multi.dart';
import 'package:parser_builder/parser_builder.dart';
import 'package:parser_builder/sequence.dart';
import 'package:parser_builder/transformers.dart';

void main(List<String> args) async {
  final context = Context();
  context.optimizeForSize = false;
  final filename = 'lib/csv_parser.dart';
  await fastBuild(context, [_parse], filename, header: __header);
}

const __header = r'''
// This code was generated by a tool.
// https://github.com/mezoni/parser_builder

// ignore_for_file: unused_local_variable

import 'package:source_span/source_span.dart';

List<List<String>> parse(String source) {
    final state = StringState(source);
  final result = _parse(state);
  if (!state.ok) {
    final errors = Err.errorReport(state.error);
    final message = _errorMessage(source, errors);
    throw FormatException('\n$message');
  }

  return result!;
}

''';

const _empty = Named('_empty', Value<String, String>(''));

const _field = Named('_field', Alt([_text, _string, _empty]));

const _parse = Named('_parse', Terminated(_rows, Eof<String>()));

const _row = Named('_row', SeparatedList1(_field, Tag(',')));

const _rows = Named(
    '_rows',
    Terminated(SeparatedList1(_row, Skip<String>([LineEnding(), Not(Eof())])),
        Opt(LineEnding())));

const _string = Named(
    '_string',
    Delimited(
        Tag('"'),
        Map$(
            Many0(Alt([
              Value(0x22, Tag('""')),
              Satisfy(NotCharClass('["]')),
            ])),
            _toString),
        Tag('"')));

const _text = Named('_text', TakeWhile1(NotCharClass('[,"] | #xA | #xD')));

const _toString = TX<List<int>, String>('String.fromCharCodes({{x}})');
