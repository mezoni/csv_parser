%%

  final String _separator;

  final int _separatorChar;

  CsvExParser({
    String separator = ',',
  })  : _separator = separator.isEmpty
            ? throw ArgumentError('Must not be empty', 'separator')
            : separator,
        _separatorChar = separator.runes.length != 1
            ? throw ArgumentError.value(separator, 'separator',
                'The length of the separator must be one character')
            : separator.runes.first;

%%

@event
Start = v:Rows Eol? @eof() ;

@inline
Chars = ($[^"]+ / '""' <String>{ $$ = '"'; })* ;

@inline
CloseQuote = '"' Spaces ;

Eol = '\n' / '\r\n' / '\r' ;

@event
@inline
Field = String / Text ;

@inline
OpenQuote = Spaces '"' ;

@event
Row = @list1(Field, Separator ↑ v:Field) ;

@inline
RowEnding = Eol !@eof() ;

Rows = v:@list1(Row, RowEnding ↑ v:Row) ;

@inline
Separator = @matchString({ _separator }) ;

Spaces = [ \t]* ;

String
String = OpenQuote ↑ v:Chars CloseQuote { $$ = v.join(); } ;

Text = $TextChar* ;

@inline
TextChar = @verify('Unexpected character', [^"\n\r], { $$ != _separatorChar }) ;