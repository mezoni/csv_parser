// This code was generated by a tool.
// https://github.com/mezoni/parser_builder

// ignore_for_file: unused_local_variable

import 'package:source_span/source_span.dart';

/// Parses the CSV data and returns the result as a `List<List<String>>`.
/// - Will not parse numbers
/// - The field separator is parsed as specified in the `separator` argument
/// - Line endings are `\n`, `\r\n` or '\r'
/// - The start and end of strings is the character `"`
/// - Escaping a character `"` in a string is parsed via sequence `""`
/// - Exception `FormatException` will be thrown if parsing fails
List<List<String>> parse(String source, {String separator = ','}) {
  void check(String name, String value) {
    if (value.runes.length != 1) {
      throw ArgumentError.value(value, name, 'Must be 1 code point long');
    }
  }

  check('separator', separator);
  final state = StringState(source);
  final separatorChar = separator.runes.first;
  state.context = _StateContext(
      notTextChar: (int x) =>
          !(x == 0xA || x == 0xD || x == 0x22 || x == separatorChar),
      separator: separator);
  final result = _parse(state);
  if (!state.ok) {
    final errors = Err.errorReport(state.error);
    final message = _errorMessage(source, errors);
    throw FormatException('\n$message');
  }

  return result!;
}

bool? _ws(State<String> state) {
  final source = state.source;
  bool? $0;
  state.ok = true;
  final $len = source.length;
  var $pos = state.pos;
  bool $test(int x) => x == 0x9 || x == 0x20;
  while ($pos < $len) {
    final c = source.runeAt($pos);
    final v = $test(c);
    if (!v) {
      break;
    }
    $pos += c > 0xffff ? 2 : 1;
  }
  state.pos = $pos;
  $0 = true;
  return $0;
}

bool? _openQuote(State<String> state) {
  final source = state.source;
  bool? $0;
  final $pos = state.pos;
  bool? $1;
  $1 = _ws(state);
  if (state.ok) {
    String? $2;
    final $3 = state.pos;
    if ($3 < source.length && source.codeUnitAt($3) == 34) {
      state.pos++;
      state.ok = true;
      $2 = '"';
    }
    if ($2 == null) {
      state.ok = false;
      state.error = ErrExpected.tag($3, const Tag('"'));
    }
    if (state.ok) {
      $0 = true;
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

List<int>? _chars(State<String> state) {
  final source = state.source;
  List<int>? $0;
  final $list = <int>[];
  for (;;) {
    int? $1;
    for (;;) {
      int? $2;
      final $pos = state.pos;
      if ($pos < source.length) {
        bool test(int x) => !(x == 0x22);
        final c = source.runeAt($pos);
        final v = test(c);
        if (v) {
          state.pos += c > 0xffff ? 2 : 1;
          state.ok = true;
          $2 = c;
        } else {
          state.ok = false;
          state.error = ErrUnexpected.char($pos, Char(c));
        }
      } else {
        state.ok = false;
        state.error = ErrUnexpected.eof($pos);
      }
      if (state.ok) {
        $1 = $2;
        break;
      }
      final $3 = state.error;
      int? $4;
      String? $6;
      state.ok = false;
      final $7 = state.pos;
      if ($7 < source.length && source.codeUnitAt($7) == 34) {
        state.ok = source.startsWith('""', $7);
      }
      if (state.ok) {
        state.pos += 2;
        $6 = '""';
      } else {
        state.error = ErrExpected.tag($7, const Tag('""'));
      }
      if (state.ok) {
        $4 = 34;
      }
      if (state.ok) {
        $1 = $4;
        break;
      }
      final $5 = state.error;
      state.error = ErrCombined(state.pos, [$3, $5]);
      break;
    }
    if (!state.ok) {
      state.ok = true;
      // To prevent a red warning at runtime about using the null check operator on non null value
      if (state.ok) {
        $0 = $list;
      }
      break;
    }
    $list.add($1!);
  }
  return $0;
}

bool? _closeQuote(State<String> state) {
  final source = state.source;
  bool? $0;
  final $pos = state.pos;
  String? $1;
  final $2 = state.pos;
  if ($2 < source.length && source.codeUnitAt($2) == 34) {
    state.pos++;
    state.ok = true;
    $1 = '"';
  }
  if ($1 == null) {
    state.ok = false;
    state.error = ErrExpected.tag($2, const Tag('"'));
  }
  if (state.ok) {
    bool? $3;
    $3 = _ws(state);
    if (state.ok) {
      $0 = true;
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

String? _string(State<String> state) {
  String? $0;
  final $pos = state.pos;
  bool? $1;
  $1 = _openQuote(state);
  if (state.ok) {
    String? $2;
    List<int>? $3;
    $3 = _chars(state);
    if (state.ok) {
      String map(List<int> x) => String.fromCharCodes(x);
      final v = $3!;
      $2 = map(v);
    }
    if (state.ok) {
      bool? $4;
      $4 = _closeQuote(state);
      if (state.ok) {
        $0 = $2!;
      }
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

String? _text(State<String> state) {
  final source = state.source;
  String? $0;
  state.ok = true;
  final $start = state.pos;
  final $len = source.length;
  var $pos = $start;
  final $test = (state.context as _StateContext).notTextChar;
  while ($pos < $len) {
    final c = source.runeAt($pos);
    final v = $test(c);
    if (!v) {
      break;
    }
    $pos += c > 0xffff ? 2 : 1;
  }
  state.pos = $pos;
  $0 = source.substring($start, $pos);
  return $0;
}

String? _field(State<String> state) {
  String? $0;
  for (;;) {
    String? $1;
    $1 = _string(state);
    if (state.ok) {
      $0 = $1;
      break;
    }
    final $2 = state.error;
    String? $3;
    $3 = _text(state);
    if (state.ok) {
      $0 = $3;
      break;
    }
    final $4 = state.error;
    state.error = ErrCombined(state.pos, [$2, $4]);
    break;
  }
  return $0;
}

String? _separator(State<String> state) {
  final source = state.source;
  String? $0;
  final $pos = state.pos;
  String $get(dynamic x) => (state.context as _StateContext).separator;
  final $tag = $get(null);
  state.ok = source.startsWith($tag, $pos);
  if (state.ok) {
    state.pos += $tag.length;
    $0 = $tag;
  } else {
    state.error = ErrExpected.tag($pos, Tag($tag));
  }
  return $0;
}

List<String>? _row(State<String> state) {
  List<String>? $0;
  final $list = <String>[];
  var $pos = state.pos;
  for (;;) {
    String? $1;
    $1 = _field(state);
    if (!state.ok) {
      state.pos = $pos;
      break;
    }
    $list.add($1!);
    $pos = state.pos;
    String? $2;
    $2 = _separator(state);
    if (!state.ok) {
      break;
    }
  }
  if ($list.isNotEmpty) {
    state.ok = true;
    $0 = $list;
  }
  return $0;
}

String? _eol(State<String> state) {
  final source = state.source;
  String? $0;
  for (;;) {
    String? $1;
    state.ok = false;
    final $pos = state.pos;
    if ($pos < source.length) {
      var c = source.codeUnitAt($pos);
      if (c == 0xA) {
        state.pos++;
        state.ok = true;
        $1 = '\n';
      } else if (c == 0xD) {
        if ($pos + 1 < source.length) {
          c = source.codeUnitAt($pos + 1);
          if (c == 0xA) {
            state.pos += 2;
            state.ok = true;
            $1 = '\r\n';
          } else {
            state.error = ErrExpected.char($pos + 1, const Char(0xA));
          }
        } else {
          state.error = ErrUnexpected.eof(source.length);
        }
      } else {
        state.error = ErrUnexpected.char($pos, Char(c));
      }
    } else {
      state.error = ErrUnexpected.eof(source.length);
    }
    if (state.ok) {
      $0 = $1;
      break;
    }
    final $2 = state.error;
    String? $3;
    final $5 = state.pos;
    if ($5 < source.length && source.codeUnitAt($5) == 13) {
      state.pos++;
      state.ok = true;
      $3 = '\r';
    }
    if ($3 == null) {
      state.ok = false;
      state.error = ErrExpected.tag($5, const Tag('\r'));
    }
    if (state.ok) {
      $0 = $3;
      break;
    }
    final $4 = state.error;
    state.error = ErrCombined(state.pos, [$2, $4]);
    break;
  }
  return $0;
}

List<List<String>>? _rows(State<String> state) {
  List<List<String>>? $0;
  final $pos = state.pos;
  List<List<String>>? $1;
  final $list = <List<String>>[];
  var $pos1 = state.pos;
  for (;;) {
    List<String>? $2;
    $2 = _row(state);
    if (!state.ok) {
      state.pos = $pos1;
      break;
    }
    $list.add($2!);
    $pos1 = state.pos;
    bool? $3;
    final $pos2 = state.pos;
    String? $4;
    $4 = _eol(state);
    if (state.ok) {
      bool? $5;
      final $pos3 = state.pos;
      bool? $6;
      state.ok = state.source.atEnd(state.pos);
      if (state.ok) {
        $6 = true;
      } else {
        state.error = ErrExpected.eof(state.pos);
      }
      if (!state.ok) {
        state.ok = true;
        $5 = true;
      } else {
        state.pos = $pos3;
        state.ok = false;
        state.error = ErrUnknown(state.pos);
      }
      if (state.ok) {
        $3 = true;
      }
    }
    if (!state.ok) {
      state.pos = $pos2;
    }
    if (!state.ok) {
      break;
    }
  }
  if ($list.isNotEmpty) {
    state.ok = true;
    $1 = $list;
  }
  if (state.ok) {
    dynamic $7;
    String? $8;
    $8 = _eol(state);
    if (state.ok) {
      $7 = $8!;
    } else {
      state.ok = true;
      $7 = null;
    }
    if (state.ok) {
      $0 = $1!;
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

List<List<String>>? _parse(State<String> state) {
  List<List<String>>? $0;
  final $pos = state.pos;
  List<List<String>>? $1;
  $1 = _rows(state);
  if (state.ok) {
    bool? $2;
    state.ok = state.source.atEnd(state.pos);
    if (state.ok) {
      $2 = true;
    } else {
      state.error = ErrExpected.eof(state.pos);
    }
    if (state.ok) {
      $0 = $1!;
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

String _errorMessage(String source, List<Err> errors,
    [color, int maxCount = 10, String? url]) {
  final sb = StringBuffer();
  for (var i = 0; i < errors.length; i++) {
    if (i > maxCount) {
      break;
    }

    final error = errors[i];
    if (error.offset + error.length > source.length) {
      source += ' ' * (error.offset + error.length - source.length);
    }

    final file = SourceFile.fromString(source, url: url);
    final span = file.span(error.offset, error.offset + error.length);
    if (sb.isNotEmpty) {
      sb.writeln();
    }

    sb.write(span.message(error.toString(), color: color));
  }

  if (errors.length > maxCount) {
    sb.writeln();
    sb.write('(${errors.length - maxCount} more errors...)');
  }

  return sb.toString();
}

/// Represents the `char` used in parsing errors.
class Char {
  final int charCode;

  const Char(this.charCode);

  @override
  int get hashCode => charCode.hashCode;

  @override
  operator ==(other) {
    return other is Char && other.charCode == charCode;
  }

  @override
  String toString() {
    final s = String.fromCharCode(charCode);
    return '\'$s\'';
  }
}

abstract class Err {
  @override
  int get hashCode => length.hashCode ^ offset.hashCode;

  int get length;

  int get offset;

  @override
  bool operator ==(other) {
    return other is Err && other.length == length && other.offset == offset;
  }

  static List<Err> errorReport(Err error) {
    var result = Err.flatten(error);
    result = Err.groupExpected(result);
    return result;
  }

  static List<Err> flatten(Err error) {
    void flatten(Err error, List<Err> result) {
      if (error is ErrCombined) {
        for (final error in error.errors) {
          flatten(error, result);
        }
      } else if (error is ErrWithTagAndErrors) {
        final inner = <Err>[];
        for (final nestedError in error.errors) {
          flatten(nestedError, inner);
        }

        int max(int x, int y) => x > y
            ? x
            : y < x
                ? x
                : y;
        final maxOffset = inner.map((e) => e.offset).reduce(max);
        final farthest = inner.where((e) => e.offset == maxOffset);
        final offset = error.offset;
        final tag = error.tag;
        result.add(ErrExpected.tag(offset, tag));
        if (maxOffset > offset) {
          if (error is ErrMalformed) {
            result
                .add(ErrMessage(offset, maxOffset - offset, 'Malformed $tag'));
            result.addAll(farthest);
          } else if (error is ErrNested) {
            result.addAll(farthest);
          } else {
            throw StateError('Internal error');
          }
        }
      } else {
        result.add(error);
      }
    }

    final result = <Err>[];
    flatten(error, result);
    return result.toSet().toList();
  }

  static List<Err> groupExpected(List<Err> errors) {
    final result = <Err>[];
    final expected = errors.whereType<ErrExpected>();
    Map<T, List<S>> groupBy<S, T>(Iterable<S> values, T Function(S) key) {
      final map = <T, List<S>>{};
      for (final element in values) {
        (map[key(element)] ??= []).add(element);
      }
      return map;
    }

    final groupped = groupBy(expected, (Err e) => e.offset);
    final offsets = <int>{};
    final processed = <Err>{};
    for (final error in errors) {
      if (!processed.add(error)) {
        continue;
      }

      if (error is! ErrExpected) {
        result.add(error);
        continue;
      }

      final offset = error.offset;
      if (!offsets.add(offset)) {
        continue;
      }

      final elements = <String>[];
      for (final error in groupped[offset]!) {
        elements.add(error.value.toString());
        processed.add(error);
      }

      final message = elements.join(', ');
      final newError = ErrMessage(offset, 1, 'Expected: $message');
      result.add(newError);
    }

    return result;
  }
}

class ErrCombined extends ErrWithErrors {
  @override
  final List<Err> errors;

  @override
  final int offset;

  ErrCombined(this.offset, this.errors);

  @override
  int get length => 1;
}

class ErrExpected extends Err {
  @override
  final int offset;

  final Object? value;

  ErrExpected(this.offset, this.value);

  ErrExpected.char(this.offset, Char value) : value = value;

  ErrExpected.eof(this.offset) : value = const Tag('EOF');

  ErrExpected.label(this.offset, String value) : value = value;

  ErrExpected.tag(this.offset, Tag value) : value = value;

  @override
  int get length => 1;

  @override
  String toString() {
    final result = 'Expected: $value';
    return result;
  }
}

class ErrMalformed extends ErrWithTagAndErrors {
  @override
  final List<Err> errors;

  @override
  final int offset;

  @override
  final Tag tag;

  ErrMalformed(this.offset, this.tag, this.errors);

  @override
  int get length => 1;

  @override
  String toString() {
    final result = 'Malformed $tag';
    return result;
  }
}

class ErrMessage extends Err {
  @override
  final int length;

  final String message;

  @override
  final int offset;

  ErrMessage(this.offset, this.length, this.message);

  @override
  String toString() {
    return message;
  }
}

class ErrNested extends ErrWithTagAndErrors {
  @override
  final List<Err> errors;

  @override
  final int offset;

  @override
  final Tag tag;

  ErrNested(this.offset, this.tag, this.errors);

  @override
  int get length => 1;

  @override
  String toString() {
    final result = 'Nested $tag';
    return result;
  }
}

class ErrUnexpected extends Err {
  @override
  final int length;

  @override
  final int offset;

  final Object? value;

  ErrUnexpected(this.offset, this.length, this.value);

  ErrUnexpected.char(this.offset, Char value)
      : length = 1,
        value = value;

  ErrUnexpected.eof(this.offset)
      : length = 1,
        value = const Tag('EOF');

  ErrUnexpected.label(this.offset, String value)
      : length = value.length,
        value = value;

  ErrUnexpected.tag(this.offset, Tag value)
      : length = value.name.length,
        value = value;

  @override
  String toString() {
    final result = 'Unexpected: $value';
    return result;
  }
}

class ErrUnknown extends Err {
  @override
  final int offset;

  ErrUnknown(this.offset);

  @override
  int get length => 1;

  @override
  String toString() {
    final result = 'Unknown error';
    return result;
  }
}

abstract class ErrWithErrors extends Err {
  List<Err> get errors;

  @override
  String toString() {
    final list = errors.join(', ');
    final result = '[$list]';
    return result;
  }
}

abstract class ErrWithTagAndErrors extends ErrWithErrors {
  Tag get tag;
}

abstract class State<T> {
  dynamic context;

  Err error = ErrUnknown(-1);

  bool ok = false;

  int pos = 0;

  final T source;

  State(this.source);
}

class StringState extends State<String> {
  StringState(String source) : super(source);

  @override
  String toString() {
    if (pos >= source.length) {
      return '$pos:';
    }

    var length = source.length - pos;
    length = length > 40 ? 40 : length;
    final string = source.substring(pos, pos + length);
    return '$pos:$string';
  }
}

/// Represents the `tag` (symbol) used in parsing errors.
class Tag {
  final String name;

  const Tag(this.name);

  @override
  int get hashCode => name.hashCode;

  @override
  operator ==(other) {
    return other is Tag && other.name == name;
  }

  @override
  String toString() {
    return name;
  }
}

extension on String {
  /// Returns `true` if [pos] points to the end of the string (or beyond).
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  bool atEnd(int pos) {
    return pos >= length;
  }

  /// Parses the 16-bit character [c] and returns that character.
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  int? char16(State<String> state, int c) {
    final pos = state.pos;
    if (pos < length) {
      final c2 = codeUnitAt(pos);
      if (c == c2) {
        state.pos++;
        state.ok = true;
        return c;
      }
    }
    state.ok = false;
    state.error = ErrExpected.char(pos, Char(c));
    return null;
  }

  /// Parses the 32-bit character [c] and returns that character.
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  int? char32(State<String> state, int c) {
    final pos = state.pos;
    if (pos < length) {
      final c2 = runeAt(pos);
      if (c == c2) {
        state.pos += c > 0xffff ? 2 : 1;
        state.ok = true;
        return c;
      }
    }
    state.ok = false;
    state.error = ErrExpected.char(pos, Char(c));
    return null;
  }

  /// Returns the rune at position [index].
  @pragma('vm:exact-result-type', 'dart:core#_Smi')
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  int runeAt(int index) {
    final c1 = codeUnitAt(index);
    index++;
    if ((c1 & 0xfc00) == 0xd800 && index < length) {
      final c2 = codeUnitAt(index);
      if ((c2 & 0xfc00) == 0xdc00) {
        return 0x10000 + ((c1 & 0x3ff) << 10) + (c2 & 0x3ff);
      }
    }
    return c1;
  }

  /// Parses a short [tag] as a single 16-bit character [c] and returns that
  /// [tag].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String? shortTag(State<String> state, String tag, int c) {
    final pos = state.pos;
    if (pos < length) {
      final c2 = codeUnitAt(pos);
      if (c == c2) {
        state.pos++;
        state.ok = true;
        return tag;
      }
    }
    state.ok = false;
    state.error = ErrExpected.tag(pos, Tag(tag));
    return null;
  }

  /// Returns a slice (substring) of the string from [start] to [end].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String slice(int start, int end) {
    return substring(start, end);
  }

  /// Parses [tag] and returns that [tag].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String? tag(State<String> state, String tag) {
    final pos = state.pos;
    if (startsWith(tag, pos)) {
      state.ok = true;
      state.pos += tag.length;
      return tag;
    }
    state.ok = false;
    state.error = ErrExpected.tag(pos, Tag(tag));
    return null;
  }

  /// Parses [tag] case-insensitively using the converter [convert] and returns
  /// this [tag].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String? tagNoCase(
      State<String> state, String tag, String Function(String s) convert) {
    final pos = state.pos;
    final len = tag.length;
    if (pos + len <= length) {
      final part = substring(pos, pos + len);
      final tag2 = convert(part);
      if (tag == tag2) {
        state.pos += len;
        state.ok = true;
        return tag;
      }
    }
    state.ok = false;
    state.error = ErrExpected.tag(pos, Tag(tag));
    return null;
  }
}

class _StateContext {
  final bool Function(int) notTextChar;

  final String separator;

  _StateContext({required this.notTextChar, required this.separator});
}
