// This code was generated by a tool.
// https://github.com/mezoni/parser_builder

// ignore_for_file: unused_local_variable

import 'package:source_span/source_span.dart';

/// Parses the CSV data and returns the result as a `List<List<String>>`.
/// - Will not parse numbers
/// - The character `,` is used as a field separator
/// - Line endings are `\n` or `\r\n`
/// - The start and end of strings is the character `"`
/// - Escaping a character `"` in a string is parsed via sequence `""`
/// - Exception `FormatException` will be thrown if parsing fails
List<List<String>> parse(String source) {
  final state = StringState(source);
  final result = _parse(state);
  if (!state.ok) {
    final errors = Err.errorReport(state.error);
    final message = _errorMessage(source, errors);
    throw FormatException('\n$message');
  }

  return result!;
}

String? _text(State<String> state) {
  final source = state.source;
  String? $0;
  state.ok = true;
  final $start = state.pos;
  final $len = source.length;
  var $pos = $start;
  if ($pos < $len) {
    var $c = 0;
    while ($pos < $len) {
      $c = source.runeAt($pos);
      final $v = !($c == 0xA || $c == 0xD || $c == 0x22 || $c == 0x2C);
      if (!$v) {
        break;
      }
      $pos += $c > 0xffff ? 2 : 1;
    }
    if ($pos > $start) {
      state.pos = $pos;
      $0 = source.substring($start, $pos);
    } else {
      state.pos = $start;
      state.ok = false;
      state.error = Err.unexpectedChar($pos, Char($c));
    }
  } else {
    state.ok = false;
    state.error = Err.unexpectedEof($pos);
  }
  return $0;
}

String? _string(State<String> state) {
  final source = state.source;
  String? $0;
  final $pos = state.pos;
  String? $1;
  final $pos1 = state.pos;
  if ($pos1 < source.length) {
    final $c = source.codeUnitAt($pos1);
    if ($c == 34) {
      state.pos++;
      state.ok = true;
      $1 = '"';
    }
  }
  if ($1 == null) {
    state.ok = false;
    state.error = Err.expectedTag($pos1, const Tag('"'));
  }
  if (state.ok) {
    String? $2;
    List<int>? $3;
    int? $4;
    for (;;) {
      int? $5;
      String? $7;
      final $pos2 = state.pos;
      if (source.startsWith('""', $pos2)) {
        state.pos += 2;
        state.ok = true;
        $7 = '""';
      } else {
        state.ok = false;
        state.error = Err.expectedTag($pos2, const Tag('""'));
      }
      if (state.ok) {
        $5 = 34;
      }
      if (state.ok) {
        $4 = $5;
        break;
      }
      final $6 = state.error;
      int? $8;
      final $pos3 = state.pos;
      if ($pos3 < source.length) {
        final $c1 = source.runeAt($pos3);
        final $v = !($c1 == 0x22);
        if ($v) {
          state.pos += $c1 > 0xffff ? 2 : 1;
          state.ok = true;
          $8 = $c1;
        } else {
          state.ok = false;
          state.error = Err.unexpectedChar($pos3, Char($c1));
        }
      } else {
        state.ok = false;
        state.error = Err.unexpectedEof($pos3);
      }
      if (state.ok) {
        $4 = $8;
        break;
      }
      final $9 = state.error;
      state.error = Err.combined(state.pos, [$6, $9]);
      break;
    }
    if (state.ok) {
      final $list = [$4!];
      while (true) {
        int? $10;
        for (;;) {
          int? $11;
          String? $13;
          final $pos4 = state.pos;
          if (source.startsWith('""', $pos4)) {
            state.pos += 2;
            state.ok = true;
            $13 = '""';
          } else {
            state.ok = false;
            state.error = Err.expectedTag($pos4, const Tag('""'));
          }
          if (state.ok) {
            $11 = 34;
          }
          if (state.ok) {
            $10 = $11;
            break;
          }
          final $12 = state.error;
          int? $14;
          final $pos5 = state.pos;
          if ($pos5 < source.length) {
            final $c2 = source.runeAt($pos5);
            final $v1 = !($c2 == 0x22);
            if ($v1) {
              state.pos += $c2 > 0xffff ? 2 : 1;
              state.ok = true;
              $14 = $c2;
            } else {
              state.ok = false;
              state.error = Err.unexpectedChar($pos5, Char($c2));
            }
          } else {
            state.ok = false;
            state.error = Err.unexpectedEof($pos5);
          }
          if (state.ok) {
            $10 = $14;
            break;
          }
          final $15 = state.error;
          state.error = Err.combined(state.pos, [$12, $15]);
          break;
        }
        if (!state.ok) {
          $3 = $list;
          break;
        }
        $list.add($10!);
      }
    } else {
      // To prevent a red warning at runtime about using the null check operator on non null value
      if (true != false) {
        $3 = const [];
      }
    }
    state.ok = true;
    if (state.ok) {
      final $v1 = $3!;
      final $v2 = String.fromCharCodes($v1);
      $2 = $v2;
    }
    if (state.ok) {
      String? $16;
      final $pos6 = state.pos;
      if ($pos6 < source.length) {
        final $c3 = source.codeUnitAt($pos6);
        if ($c3 == 34) {
          state.pos++;
          state.ok = true;
          $16 = '"';
        }
      }
      if ($16 == null) {
        state.ok = false;
        state.error = Err.expectedTag($pos6, const Tag('"'));
      }
      if (state.ok) {
        $0 = $2!;
      }
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

String? _empty(State<String> state) {
  String? $0;
  state.ok = true;
  $0 = '';
  return $0;
}

String? _field(State<String> state) {
  String? $0;
  for (;;) {
    String? $1;
    $1 = _text(state);
    if (state.ok) {
      $0 = $1;
      break;
    }
    final $2 = state.error;
    String? $3;
    $3 = _string(state);
    if (state.ok) {
      $0 = $3;
      break;
    }
    final $4 = state.error;
    String? $5;
    $5 = _empty(state);
    if (state.ok) {
      $0 = $5;
      break;
    }
    final $6 = state.error;
    state.error = Err.combined(state.pos, [$2, $4, $6]);
    break;
  }
  return $0;
}

List<String>? _row(State<String> state) {
  final source = state.source;
  List<String>? $0;
  String? $1;
  $1 = _field(state);
  if (state.ok) {
    final $list = [$1!];
    while (true) {
      final $pos = state.pos;
      String? $2;
      final $pos1 = state.pos;
      if ($pos1 < source.length) {
        final $c = source.codeUnitAt($pos1);
        if ($c == 44) {
          state.pos++;
          state.ok = true;
          $2 = ',';
        }
      }
      if ($2 == null) {
        state.ok = false;
        state.error = Err.expectedTag($pos1, const Tag(','));
      }
      if (!state.ok) {
        break;
      }
      String? $3;
      $3 = _field(state);
      if (!state.ok) {
        state.pos = $pos;
        break;
      }
      $list.add($3!);
    }
    state.ok = true;
    $0 = $list;
  }
  return $0;
}

List<List<String>>? _rows(State<String> state) {
  final source = state.source;
  List<List<String>>? $0;
  final $pos = state.pos;
  List<List<String>>? $1;
  List<String>? $2;
  $2 = _row(state);
  if (state.ok) {
    final $list = [$2!];
    while (true) {
      final $pos1 = state.pos;
      bool? $3;
      final $pos2 = state.pos;
      String? $4;
      state.ok = false;
      final $pos3 = state.pos;
      if ($pos3 < source.length) {
        var $c = source.codeUnitAt($pos3);
        if ($c == 0xA) {
          state.pos++;
          state.ok = true;
          $4 = '\n';
        } else if ($c == 0xD) {
          if ($pos3 + 1 < source.length) {
            $c = source.codeUnitAt($pos3 + 1);
            if ($c == 0xA) {
              state.pos += 2;
              state.ok = true;
              $4 = '\r\n';
            } else {
              state.error = Err.expectedChar($pos3 + 1, const Char(0xA));
            }
          } else {
            state.error = Err.unexpectedEof(source.length);
          }
        } else {
          state.error = Err.unexpectedChar($pos3, Char($c));
        }
      } else {
        state.error = Err.unexpectedEof(source.length);
      }
      if (state.ok) {
        bool? $5;
        final $pos4 = state.pos;
        bool? $6;
        final $pos5 = state.pos;
        state.ok = state.source.atEnd($pos5);
        if (state.ok) {
          $6 = true;
        } else {
          state.error = Err.expectedEof($pos5);
        }
        if (!state.ok) {
          state.ok = true;
          $5 = true;
        } else {
          state.pos = $pos4;
          state.ok = false;
          state.error = Err.unknown(state.pos);
        }
        if (state.ok) {
          $3 = true;
        }
      }
      if (!state.ok) {
        state.pos = $pos2;
      }
      if (!state.ok) {
        break;
      }
      List<String>? $7;
      $7 = _row(state);
      if (!state.ok) {
        state.pos = $pos1;
        break;
      }
      $list.add($7!);
    }
    state.ok = true;
    $1 = $list;
  }
  if (state.ok) {
    dynamic $8;
    String? $9;
    state.ok = false;
    final $pos6 = state.pos;
    if ($pos6 < source.length) {
      var $c1 = source.codeUnitAt($pos6);
      if ($c1 == 0xA) {
        state.pos++;
        state.ok = true;
        $9 = '\n';
      } else if ($c1 == 0xD) {
        if ($pos6 + 1 < source.length) {
          $c1 = source.codeUnitAt($pos6 + 1);
          if ($c1 == 0xA) {
            state.pos += 2;
            state.ok = true;
            $9 = '\r\n';
          } else {
            state.error = Err.expectedChar($pos6 + 1, const Char(0xA));
          }
        } else {
          state.error = Err.unexpectedEof(source.length);
        }
      } else {
        state.error = Err.unexpectedChar($pos6, Char($c1));
      }
    } else {
      state.error = Err.unexpectedEof(source.length);
    }
    if (state.ok) {
      $8 = $9!;
    } else {
      state.ok = true;
      $8 = null;
    }
    if (state.ok) {
      $0 = $1!;
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

List<List<String>>? _parse(State<String> state) {
  List<List<String>>? $0;
  final $pos = state.pos;
  List<List<String>>? $1;
  $1 = _rows(state);
  if (state.ok) {
    bool? $2;
    final $pos1 = state.pos;
    state.ok = state.source.atEnd($pos1);
    if (state.ok) {
      $2 = true;
    } else {
      state.error = Err.expectedEof($pos1);
    }
    if (state.ok) {
      $0 = $1!;
    }
  }
  if (!state.ok) {
    state.pos = $pos;
  }
  return $0;
}

String _errorMessage(String source, List<Err> errors,
    [color, int maxCount = 10, String? url]) {
  final sb = StringBuffer();
  for (var i = 0; i < errors.length; i++) {
    if (i > maxCount) {
      break;
    }

    final error = errors[i];
    if (error.offset + error.length > source.length) {
      source += ' ' * (error.offset + error.length - source.length);
    }

    final file = SourceFile.fromString(source, url: url);
    final span = file.span(error.offset, error.offset + error.length);
    if (sb.isNotEmpty) {
      sb.writeln();
    }

    sb.write(span.message(error.toString(), color: color));
  }

  if (errors.length > maxCount) {
    sb.writeln();
    sb.write('(${errors.length - maxCount} more errors...)');
  }

  return sb.toString();
}

/// Represents the `char` used in parsing errors.
class Char {
  final int charCode;

  const Char(this.charCode);

  @override
  int get hashCode => charCode.hashCode;

  @override
  operator ==(other) {
    return other is Char && other.charCode == charCode;
  }

  @override
  String toString() {
    final s = String.fromCharCode(charCode);
    return '\'$s\'';
  }
}

/// Represents a type used to indicate parsing errors.
class Err {
  final List<Err> errors;
  final ErrKind kind;
  final int length;
  final int offset;
  final Object? value;

  const Err(this.offset, this.length,
      {this.errors = const [], required this.kind, this.value});

  Err.combined(this.offset, this.errors)
      : kind = ErrKind.combined,
        length = 1,
        value = null;

  Err.expected(this.offset, this.length, this.value)
      : kind = ErrKind.expected,
        errors = const [];

  Err.expectedChar(this.offset, Char char)
      : kind = ErrKind.expected,
        errors = const [],
        length = 1,
        value = char;

  Err.expectedEof(this.offset)
      : kind = ErrKind.expected,
        errors = const [],
        length = 1,
        value = const Tag('EOF');

  Err.expectedLabel(this.offset, String label)
      : kind = ErrKind.expected,
        errors = const [],
        length = 1,
        value = label;

  Err.expectedTag(this.offset, Tag tag)
      : kind = ErrKind.expected,
        errors = const [],
        length = 1,
        value = tag;

  Err.malformed(this.offset, String label, this.errors)
      : kind = ErrKind.malformed,
        length = 1,
        value = label;

  Err.message(this.offset, this.length, String message)
      : kind = ErrKind.message,
        errors = const [],
        value = message;

  Err.nested(this.offset, Tag tag, this.errors)
      : kind = ErrKind.nested,
        length = 1,
        value = tag;

  Err.unexpectedChar(this.offset, Char char)
      : kind = ErrKind.unexpected,
        errors = const [],
        length = 1,
        value = char;

  Err.unexpectedEof(this.offset)
      : kind = ErrKind.unexpected,
        errors = const [],
        length = 1,
        value = const Tag('EOF');

  Err.unexpectedTag(this.offset, Tag tag)
      : kind = ErrKind.unexpected,
        errors = const [],
        length = tag.name.length,
        value = tag;

  Err.unknown(this.offset)
      : kind = ErrKind.unknown,
        errors = const [],
        length = 1,
        value = null;

  @override
  int get hashCode {
    return errors.hashCode ^ kind.hashCode ^ offset.hashCode ^ value.hashCode;
  }

  @override
  bool operator ==(other) {
    if (other is Err) {
      return other.errors == errors &&
          other.kind == kind &&
          other.length == length &&
          other.offset == offset &&
          other.value == value;
    }
    return false;
  }

  @override
  String toString() {
    var result = '';
    switch (kind) {
      case ErrKind.combined:
        final list = errors.join(', ');
        result = '[$list]';
        break;
      case ErrKind.expected:
        result = 'Expected: $value';
        break;
      case ErrKind.malformed:
        result = 'Malformed $value';
        break;
      case ErrKind.message:
        result = value.toString();
        break;
      case ErrKind.nested:
        final list = errors.join(', ');
        result = '[$list]';
        break;
      case ErrKind.unexpected:
        result = 'Unexpected: $value';
        break;
      case ErrKind.unknown:
        result = 'Unknown error';
        break;
    }

    return result;
  }

  static List<Err> errorReport(Err error) {
    var result = Err.flatten(error);
    result = Err.groupExpected(result);
    return result;
  }

  static List<Err> flatten(Err error) {
    void flatten(Err error, List<Err> result) {
      final kind = error.kind;
      if (kind == ErrKind.combined) {
        for (final error in error.errors) {
          flatten(error, result);
        }
      } else if (kind == ErrKind.malformed || kind == ErrKind.nested) {
        final inner = <Err>[];
        for (final error in error.errors) {
          flatten(error, inner);
        }

        final max = inner.map((e) => e.offset + e.length).reduce((x, y) {
          return x == y
              ? x
              : x > y
                  ? x
                  : y;
        });
        final farthest = inner.where((e) => e.offset + e.length == max);
        final offset = error.offset;
        final value = error.value;
        result.add(Err.expected(offset, 1, value));
        if (max > offset + error.length) {
          if (kind == ErrKind.malformed) {
            result.add(Err.message(offset, max, 'Malformed $value'));
            result.addAll(farthest);
          } else if (kind == ErrKind.nested) {
            result.addAll(farthest);
          } else {
            throw StateError('Internal error');
          }
        }
      } else {
        result.add(error);
      }
    }

    final result = <Err>[];
    flatten(error, result);
    return result.toSet().toList();
  }

  static List<Err> groupExpected(List<Err> errors) {
    final result = <Err>[];
    final expected = errors.where((e) => e.kind == ErrKind.expected);
    Map<T, List<S>> groupBy<S, T>(Iterable<S> values, T Function(S) key) {
      final map = <T, List<S>>{};
      for (final element in values) {
        (map[key(element)] ??= []).add(element);
      }
      return map;
    }

    final groupped = groupBy(expected, (Err e) => e.offset);
    final offsets = <int>{};
    final processed = <Err>{};
    for (final error in errors) {
      if (!processed.add(error)) {
        continue;
      }

      final kind = error.kind;
      if (kind != ErrKind.expected) {
        result.add(error);
        continue;
      }

      final offset = error.offset;
      if (!offsets.add(offset)) {
        continue;
      }

      final elements = <String>[];
      for (final error in groupped[offset]!) {
        elements.add(error.value.toString());
        processed.add(error);
      }

      final message = elements.join(', ');
      final newError = Err.message(offset, 1, 'Expected: $message');
      result.add(newError);
    }

    return result;
  }
}

abstract class State<T> {
  Object? context;

  Err error = Err.unknown(-1);

  bool ok = false;

  int pos = 0;

  final T source;

  State(this.source);
}

class StringState extends State<String> {
  StringState(String source) : super(source);

  @override
  String toString() {
    if (pos >= source.length) {
      return '$pos:';
    }

    var length = source.length - pos;
    length = length > 40 ? 40 : length;
    final string = source.substring(pos, pos + length);
    return '$pos:$string';
  }
}

/// Represents the `tag` (symbol) used in parsing errors.
class Tag {
  final String name;

  const Tag(this.name);

  @override
  int get hashCode => name.hashCode;

  @override
  operator ==(other) {
    return other is Tag && other.name == name;
  }

  @override
  String toString() {
    return name;
  }
}

extension on String {
  /// Returns `true` if [pos] points to the end of the string (or beyond).
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  bool atEnd(int pos) {
    return pos >= length;
  }

  /// Parses the 16-bit character [c] and returns that character.
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  int? char16(State<String> state, int c) {
    state.ok = true;
    final pos = state.pos;
    if (pos < length) {
      final c2 = codeUnitAt(pos);
      if (c == c2) {
        state.pos++;
        return c;
      }
    }
    state.ok = false;
    state.error = Err.expectedChar(pos, Char(c));
    return null;
  }

  /// Parses the 32-bit character [c] and returns that character.
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  int? char32(State<String> state, int c) {
    state.ok = true;
    final pos = state.pos;
    if (pos < length) {
      final c2 = runeAt(pos);
      if (c == c2) {
        state.pos += c > 0xffff ? 2 : 1;
        return c;
      }
    }
    state.ok = false;
    state.error = Err.expectedChar(pos, Char(c));
    return null;
  }

  /// Returns the rune at position [index].
  @pragma('vm:exact-result-type', 'dart:core#_Smi')
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  int runeAt(int index) {
    final c1 = codeUnitAt(index);
    index++;
    if ((c1 & 0xfc00) == 0xd800 && index < length) {
      final c2 = codeUnitAt(index);
      if ((c2 & 0xfc00) == 0xdc00) {
        return 0x10000 + ((c1 & 0x3ff) << 10) + (c2 & 0x3ff);
      }
    }
    return c1;
  }

  /// Parses a short [tag] as a single 16-bit character [c] and returns that
  /// [tag].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String? shortTag(State<String> state, String tag, int c) {
    state.ok = true;
    final pos = state.pos;
    if (pos < length) {
      final c2 = codeUnitAt(pos);
      if (c == c2) {
        state.pos++;
        return tag;
      }
    }
    state.ok = false;
    state.error = Err.expectedTag(pos, Tag(tag));
    return null;
  }

  /// Returns a slice (substring) of the string from [start] to [end].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String slice(int start, int end) {
    return substring(start, end);
  }

  /// Parses [tag] and returns that [tag].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String? tag(State<String> state, String tag) {
    state.ok = true;
    final pos = state.pos;
    if (startsWith(tag, pos)) {
      state.pos += tag.length;
      return tag;
    }
    state.ok = false;
    state.error = Err.expectedTag(pos, Tag(tag));
    return null;
  }

  /// Parses [tag] case-insensitively using the converter [convert] and returns
  /// this [tag].
  @pragma('vm:prefer-inline')
  // ignore: unused_element
  String? tagNoCase(
      State<String> state, String tag, String Function(String s) convert) {
    state.ok = true;
    final pos = state.pos;
    final len = tag.length;
    if (pos + len <= length) {
      final part = substring(pos, pos + len);
      final tag2 = convert(part);
      if (tag == tag2) {
        state.pos += len;
        return tag;
      }
    }
    state.ok = false;
    state.error = Err.expectedTag(pos, Tag(tag));
    return null;
  }
}

/// Kinds of parsing errors.
enum ErrKind {
  combined,
  expected,
  malformed,
  message,
  nested,
  unexpected,
  unknown
}
